"use strict";(self.webpackChunk_minimajs_docs=self.webpackChunk_minimajs_docs||[]).push([[3761],{3465:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var o=e(86),s=e(6491);const i={title:"MinimaJS vs. The Crowd",sidebar_position:2},r=void 0,a={id:"demo",title:"MinimaJS vs. The Crowd",description:"This demonstration showcases the elegance and efficiency of MinimaJS compared to traditional frameworks when constructing a basic CRUD application for interacting with MongoDB.",source:"@site/docs/demo.md",sourceDirName:".",slug:"/demo",permalink:"/demo",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"MinimaJS vs. The Crowd",sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Introduction",permalink:"/"},next:{title:"Getting started",permalink:"/Guide/getting-started"}},c={},p=[{value:"Entity Modeling:",id:"entity-modeling",level:2},{value:"Controller: Fetching Posts",id:"controller-fetching-posts",level:2},{value:"Main Application Entry Point:",id:"main-application-entry-point",level:2},{value:"Next adding the rest apis",id:"next-adding-the-rest-apis",level:2}];function d(t){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"This demonstration showcases the elegance and efficiency of MinimaJS compared to traditional frameworks when constructing a basic CRUD application for interacting with MongoDB."}),"\n",(0,o.jsx)(n.h2,{id:"entity-modeling",children:"Entity Modeling:"}),"\n",(0,o.jsxs)(n.p,{children:["We begin by defining the ",(0,o.jsx)(n.code,{children:"Post"})," entity using Mongoose."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="src/post/entity.ts"',children:'import { HydratedDocument, Schema, model } from "mongoose";\nexport interface IPost {\n  title: string;\n  content: string;\n  author: {\n    name: string;\n  };\n  status: "published" | "draft";\n}\nexport type PostDocument = HydratedDocument<IPost>;\n\nconst postSchema = new Schema<IPost>({\n  title: String,\n  content: String,\n  author: {\n    name: String,\n  },\n  status: String,\n});\n\nexport const Post = model("Post", postSchema);\n'})}),"\n",(0,o.jsx)(n.h2,{id:"controller-fetching-posts",children:"Controller: Fetching Posts"}),"\n",(0,o.jsx)(n.p,{children:"The post controller handles CRUD operations."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="src/post/controller.ts"',children:'import { createSearchParams, number, string } from "@minimajs/schema";\nimport { Post } from "./entity";\n\n// utility function\nfunction pagination(page: number, perPage = 10) {\n  return [perPage, (page - 1) * perPage] as const;\n}\n// validate quey string\nexport const getPostSearchQuery = createSearchParams({\n  title: string(), // optional string\n  content: string(), // optional string\n  page: number().default(1), // automatically cast to number, and default value 1\n});\n\n// controller get posts\nexport async function getPosts() {\n  const { page, ...query } = getPostSearchQuery();\n  const [limit, skip] = pagination(page);\n  const total = await Post.countDocuments(query);\n  const data = await Post.find(query, null, { limit, skip });\n  return { total, data };\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["creating a post module with ",(0,o.jsx)(n.code,{children:"/posts"})," route"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="src/post/index.ts"',children:'import { type App } from "@minimajs/server";\nimport { getPosts } from "./controller";\n\n// creating a post module\nexport async function post(app: App) {\n  app.get("/", getPosts); // GET request handler for listing posts\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"main-application-entry-point",children:"Main Application Entry Point:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="src/index.ts"',children:'import { createApp } from "@minimajs/server";\nimport { post } from "./post";\nimport { connect } from "mongoose";\n\nconst app = createApp();\n\n// register post module with prefix /posts\napp.register(post, { prefix: "/posts" });\n\n// connecting to mongodb and wait for connection.\nconst { connection } = await connect("mongodb://localhost/minimajs-starter-kit");\napp.addHook("onClose", () => {\n  connection.close();\n  // close the mongodb connection as soon as app closed, it will fast development speed.\n});\n\n// finally start the server.\nawait app.listen({ port: 1234 });\n'})}),"\n",(0,o.jsx)(n.p,{children:"Wow!!."}),"\n",(0,o.jsx)(n.p,{children:"application is ready for list of posts api."}),"\n",(0,o.jsx)(n.h2,{id:"next-adding-the-rest-apis",children:"Next adding the rest apis"}),"\n",(0,o.jsx)(n.p,{children:"Creating post"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="src/post/controller.ts"',children:'import { createBody, number, object, string } from "@minimajs/schema";\nimport { Post } from "./entity";\n\nexport type PostPayload = ReturnType<typeof getPostPayload>;\n/*\ntype PostPayload = {\n    title: string;\n    content: string;\n    author: {\n        name: string;\n    };\n    status: "published" | "draft";\n}\n*/\n\nconst getPostPayload = createBody({\n  title: string().required().max(255),\n  content: string().required(),\n  author: object({\n    name: string().required(),\n  }).required(),\n  status: string().oneOf(["published", "draft"]).default("draft"),\n});\n\nexport function createPost() {\n  const payload = getPostPayload();\n  const post = new Post(payload);\n  return post.save();\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Find a post"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="src/post/controller.ts"',children:'import { abort, getParam } from "@minimajs/server";\nimport { Post } from "./entity";\n\nexport async function findPost() {\n  const id = getParam("post");\n  const post = await Post.findById(id);\n  if (!post) {\n    abort.notFound();\n  }\n  return post;\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Updating a post"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="src/post/controller.ts"',children:'import { createBody, string } from "@minimajs/schema";\nimport { Post } from "./entity";\n\nconst getUpdatePostPayload = createBody({\n  title: string().max(255),\n  content: string(),\n  status: string().oneOf(["published", "draft"]).default("draft"),\n});\n\nexport async function updatePost() {\n  const payload = getUpdatePostPayload();\n  const post = await findPost(); // we can use same post;\n  await post.updateOne(payload);\n  return post;\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Finally delete"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="src/post/controller.ts"',children:"export async function deletePost() {\n  const post = await findPost();\n  await post.deleteOne();\n  return post;\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Adding routes in post module"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="src/post/index.ts"',children:'import { type App } from "@minimajs/server";\nimport { createPost, deletePost, findPost, updatePost } from "./controller";\n\nexport async function post(app: App) {\n  app.post("/", createPost);\n  app.get("/:post", findPost);\n  app.patch("/:post", updatePost);\n  app.delete("/:post", deletePost);\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"yarn dev\n"})}),"\n",(0,o.jsx)(n.p,{children:"output"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"bundles src/index.ts \u2192 dist...\n\u2714 created dist (7.76 kB) in 23ms\n\u29d6 waiting for changes...\n\u21ba rs \u23ce to restart\n\n\u2514\u2500\u2500 /posts (GET, HEAD, POST)\n    \u2514\u2500\u2500 / (GET, HEAD, POST)\n        \u2514\u2500\u2500 :post (GET, HEAD, PATCH, DELETE)\n\nINFO (11978): Server listening at http://[::1]:1234\nINFO (11978): Server listening at http://127.0.0.1:1234\n"})}),"\n",(0,o.jsx)(n.p,{children:"your basic crud is ready."}),"\n",(0,o.jsxs)(n.p,{children:["full source code:\n",(0,o.jsx)(n.a,{href:"https://github.com/minima-js/starterkit/tree/crud-mongoose",children:"https://github.com/minima-js/starterkit/tree/crud-mongoose"})]})]})}function l(t={}){const{wrapper:n}={...(0,s.R)(),...t.components};return n?(0,o.jsx)(n,{...t,children:(0,o.jsx)(d,{...t})}):d(t)}},6491:(t,n,e)=>{e.d(n,{R:()=>r,x:()=>a});var o=e(1654);const s={},i=o.createContext(s);function r(t){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function a(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:r(t.components),o.createElement(i.Provider,{value:n},t.children)}}}]);