"use strict";(self.webpackChunk_minimajs_docs=self.webpackChunk_minimajs_docs||[]).push([[8671],{5158:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var i=t(86),o=t(6491);const s={title:"MinimaJS vs. The Crowd",sidebar_position:2},a=void 0,r={id:"minimajs-vs-crowd",title:"MinimaJS vs. The Crowd",description:"Streamlined Integration with Third-Party Services",source:"@site/docs/minimajs-vs-crowd.md",sourceDirName:".",slug:"/minimajs-vs-crowd",permalink:"/minimajs-vs-crowd",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"MinimaJS vs. The Crowd",sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Introduction",permalink:"/"},next:{title:"Getting started",permalink:"/Guide/getting-started"}},l={},c=[{value:"Streamlined Integration with Third-Party Services",id:"streamlined-integration-with-third-party-services",level:2},{value:"Example: Seamless Multipart File Upload Handling",id:"example-seamless-multipart-file-upload-handling",level:4},{value:"Implementation",id:"implementation",level:3},{value:"Utilization",id:"utilization",level:3},{value:"Basic CRUD operation using mongodb",id:"basic-crud-operation-using-mongodb",level:2},{value:"Entity Modeling:",id:"entity-modeling",level:3},{value:"Controller: Fetching Posts",id:"controller-fetching-posts",level:3},{value:"Main Application Entry Point:",id:"main-application-entry-point",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"streamlined-integration-with-third-party-services",children:"Streamlined Integration with Third-Party Services"}),"\n",(0,i.jsx)(n.p,{children:"One of MinimaJS's defining strengths lies in its ability to simplify the integration of third-party services. Unlike traditional frameworks that often require a two-step process involving middleware and separate functions, MinimaJS empowers you to achieve the same functionality with a single, well-defined function."}),"\n",(0,i.jsx)(n.h4,{id:"example-seamless-multipart-file-upload-handling",children:"Example: Seamless Multipart File Upload Handling"}),"\n",(0,i.jsx)(n.p,{children:"The provided code demonstrates how MinimaJS simplifies integrating multipart file upload functionalities:"}),"\n",(0,i.jsx)(n.h3,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="src/multipart.ts"',children:'import { getRequest, defer, getSignal } from "@minimajs/server";\n\nexport interface UploadedBody {\n  [key: string]: {\n    name: string;\n    stream: ReadableStream;\n  };\n}\n\nexport async function getUploadedBody<T extends UploadedBody = UploadedBody>(): Promise<T> {\n  const request = getRequest();\n  // Use the request object to access uploaded content (likely through a parsing library)\n  const abortSignal = getSignal();\n  // Utilize abortSignal for cancellation handling\n\n  // ... logic to process uploaded files (saving to temp location) ...\n  defer(cleanup); // Schedule cleanup after response is sent\n  return newBody; // Return the processed uploaded body object\n}\n\n// Cleanup function to handle temporary resources\nfunction cleanup() {\n  // Delete temporary files or perform other cleanup tasks\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"utilization",children:"Utilization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="src/post/upload-photos.ts"',children:'// upload handler function\nimport { getUploadedBody } from "../multipart";\n\nasync function handleUpload() {\n  const body = await getUploadedBody(); // No middleware needed, directly call the function\n  console.log(body.thumbnail.name); // Access uploaded file name\n  const thumbnailStream = body.thumbnail.stream; // Access uploaded file stream\n\n  // ... logic to save/process uploaded files (thumbnail and banner) ...\n\n  return "files uploaded successfully!";\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"handleUpload"})," function in ",(0,i.jsx)(n.code,{children:"post/upload-photos.ts"})," demonstrates how to effortlessly integrate the multipart handling functionality. It directly calls ",(0,i.jsx)(n.code,{children:"getUploadedBody"})," without the need for middleware setup."]}),"\n",(0,i.jsxs)(n.p,{children:["full implementation here: ",(0,i.jsx)(n.a,{href:"https://github.com/minima-js/minimajs/blob/main/packages/multipart/src/unstable.ts",children:"https://github.com/minima-js/minimajs/blob/main/packages/multipart/src/unstable.ts"})]}),"\n",(0,i.jsx)(n.h2,{id:"basic-crud-operation-using-mongodb",children:"Basic CRUD operation using mongodb"}),"\n",(0,i.jsx)(n.p,{children:"This demonstration showcases the elegance and efficiency of MinimaJS compared to traditional frameworks when constructing a basic CRUD application for interacting with MongoDB."}),"\n",(0,i.jsx)(n.h3,{id:"entity-modeling",children:"Entity Modeling:"}),"\n",(0,i.jsxs)(n.p,{children:["We begin by defining the ",(0,i.jsx)(n.code,{children:"Post"})," entity using Mongoose."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="src/post/entity.ts"',children:'import { HydratedDocument, Schema, model } from "mongoose";\nexport interface IPost {\n  title: string;\n  content: string;\n  author: {\n    name: string;\n  };\n  status: "published" | "draft";\n}\nexport type PostDocument = HydratedDocument<IPost>;\n\nconst postSchema = new Schema<IPost>({\n  title: String,\n  content: String,\n  author: {\n    name: String,\n  },\n  status: String,\n});\n\nexport const Post = model("Post", postSchema);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"controller-fetching-posts",children:"Controller: Fetching Posts"}),"\n",(0,i.jsx)(n.p,{children:"The post controller handles CRUD operations."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="src/post/controller.ts"',children:'import { createSearchParams, number, string } from "@minimajs/schema";\nimport { Post } from "./entity";\n\n// utility function\nfunction pagination(page: number, perPage = 10) {\n  return [perPage, (page - 1) * perPage] as const;\n}\n// validate quey string\nexport const getPostSearchQuery = createSearchParams({\n  title: string(), // optional string\n  content: string(), // optional string\n  page: number().default(1), // automatically cast to number, and default value 1\n});\n\n// controller get posts\nexport async function getPosts() {\n  const { page, ...query } = getPostSearchQuery();\n  const [limit, skip] = pagination(page);\n  const total = await Post.countDocuments(query);\n  const data = await Post.find(query, null, { limit, skip });\n  return { total, data };\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Creating a post module with ",(0,i.jsx)(n.code,{children:"/posts"})," route"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="src/post/index.ts"',children:'import { type App } from "@minimajs/server";\nimport { getPosts } from "./controller";\n\n// creating a post module\nexport async function post(app: App) {\n  app.get("/", getPosts); // GET request handler for listing posts\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"main-application-entry-point",children:"Main Application Entry Point:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="src/index.ts"',children:'import { createApp } from "@minimajs/server";\nimport { post } from "./post";\nimport { connect } from "mongoose";\n\nconst app = createApp();\n\n// register post module with prefix /posts\napp.register(post, { prefix: "/posts" });\n\n// connecting to mongodb and wait for connection.\nconst { connection } = await connect("mongodb://localhost/minimajs-starter-kit");\napp.addHook("onClose", () => {\n  connection.close();\n  // close the mongodb connection as soon as app closed, it will fast development speed.\n});\n\n// finally start the server.\nawait app.listen({ port: 1234 });\n'})}),"\n",(0,i.jsx)(n.p,{children:"Wow!!."}),"\n",(0,i.jsx)(n.p,{children:"Application is ready for list of posts api."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yarn dev\n"})}),"\n",(0,i.jsx)(n.p,{children:"output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"bundles src/index.ts \u2192 dist...\n\u2714 created dist (7.76 kB) in 23ms\n\u29d6 waiting for changes...\n\u21ba rs \u23ce to restart\n\n\u2514\u2500\u2500 /posts (GET, HEAD, POST)\n    \u2514\u2500\u2500 / (GET, HEAD)\n\nINFO (11978): Server listening at http://127.0.0.1:1234\n"})}),"\n",(0,i.jsxs)(n.p,{children:["full source code:\n",(0,i.jsx)(n.a,{href:"https://github.com/minima-js/starterkit/tree/crud-mongoose",children:"https://github.com/minima-js/starterkit/tree/crud-mongoose"})]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},6491:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(1654);const o={},s=i.createContext(o);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);